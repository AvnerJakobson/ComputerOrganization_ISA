# Simple Processor Simulator Documentation

## Introduction

This is a simple processor simulator implemented in C. The simulator reads a series of instructions, simulates their execution, and produces various output files capturing the state of the processor during the simulation.

## Features

- Supports a set of basic instructions including arithmetic, logic, branching, and IO operations.
- Implements interrupt handling with support for both software-triggered and timer-based interrupts.
- Simulates a simple memory hierarchy with data memory and disk storage.
- Generates output files to capture the state of registers, memory, interrupts, and other relevant components.

## Code Structure

### Defines and Includes

- Defines constants such as register sizes, disk parameters, and file paths.
- Includes necessary standard C libraries.

### Structs Definitions

- Defines structs for representing instructions, input and output files, and the simulation state.

### Function Declarations

- Declares various functions that will be defined later in the code.

### Main Code

- Defines the `main` function, which serves as the entry point for the simulator.
- Initializes data structures and opens input and output files.
- Decodes input files to obtain instructions, memory contents, and disk data.
- Executes the simulation loop, handling instructions, interrupts, and updating the simulation state.
- Generates output files capturing the final state of the simulator.

### Function Definitions

- Provides implementations for functions declared earlier in the code.

## Input Files

- The simulator expects several input files: instruction memory (`imemin`), data memory (`dmemin`), disk data (`diskin`), and software-triggered interrupts (`irq2in`).

## Output Files

1. **dmemout**: Captures the final state of data memory.
2. **regout**: Contains the values of registers R3-R15 at the end of the simulation.
3. **trace**: Logs the trace of each instruction executed during the simulation.
4. **hwregtrace**: Logs read and write operations on special hardware registers.
5. **cycles**: Contains the total number of clock cycles used in the simulation.
6. **leds**: Captures the state of LED indicators at each clock cycle.
7. **display7seg**: Logs values displayed on a 7-segment display.
8. **diskout**: Contains the final state of the simulated disk.
9. **monitor_txt**: Logs information related to a monitor.
10. **monitor_yuv**: Logs YUV data for the monitor.

## Todos

- The code includes a section for tracking todos, highlighting areas that need attention or testing.

## Conclusion

This simulator provides a basic framework for understanding processor execution and system simulation. Users can customize the input files and explore the impact on the simulated system's behavior.
